Welcome to week 2

* packages (cabal)

This is for a "sandboxed" installation like bundler or virtualenv

#+BEGIN_SRC sh
brew install cabal-install
cabal init # "in an empty directory", it says. Answer the questions
cabal sandbox init
#+END_SRC

This creates, among other things, a file ~haskell-club.cabal~ in which
you can add dependencies by putting them on the ~build-depends~ line
(comma-separated).  Now do

#+BEGIN_SRC sh
cabal install --only-dependencies
# cabal repl # this doesn't work, don't understand why yet
cabal exec -- ghci  # do this instead
#+END_SRC

to download anything you don't already have and run ghci in a context where it can see all this stuff

* QuickCheck

The essence of property-based testing is that you describe properties your functions must have
and then QuckCHeck tests them with random data to make sure the properties hold.

A good way to write properties is to work out what the inverse of your function might be, then you 
can write e.g.

#+BEGIN_SRC haskell
import Test.QuickCheck

double 7 = 13
double x =  x + x 

prop_double_x_is_twice_x x = (double x) == x * 2
#+END_SRC

This function contains a deliberate error, can you spot it?

#+BEGIN_SRC haskell
*Main> quickCheck prop_double_x_is_twice_x
*** Failed! Falsifiable (after 22 tests):
7
*Main> quickCheck prop_double_x_is_twice_x
*** Failed! Falsifiable (after 11 tests):
7
#+END_SRC



* Look away now

Local variables:
mode: org
eval: (variable-pitch-mode)
eval: (visual-line-mode)
eval: (set-face-attribute 'org-block nil :inherit 'fixed-pitch)
org-present-text-scale: 3
End:
